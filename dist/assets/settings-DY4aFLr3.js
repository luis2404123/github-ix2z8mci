import{s as o,A as i}from"./auth-ukEJXvp4.js";/* empty css                  */class n{static async updateProfile(e){try{const{data:r,error:t}=await o.auth.updateUser({data:e});if(t)throw t;return{data:r,error:null}}catch(r){return console.error("Error updating profile:",r),{data:null,error:r.message}}}static async updatePassword(e,r){try{const{error:t}=await o.auth.updateUser({password:r});if(t)throw t;return{error:null}}catch(t){return console.error("Error updating password:",t),{error:t.message}}}static async updateNotificationSettings(e){try{const{data:{user:r}}=await o.auth.getUser();if(!r)throw new Error("User not authenticated");const{data:t,error:s}=await o.from("user_settings").upsert({user_id:r.id,...e}).select().single();if(s)throw s;return{data:t,error:null}}catch(r){return console.error("Error updating notification settings:",r),{data:null,error:r.message}}}}class u{constructor(){this.init()}async init(){const{user:e,error:r}=await i.getCurrentUser();if(r||!e){window.location.href="/Login/login.html";return}this.initializeUI(e),this.initializeEventListeners()}initializeUI(e){document.getElementById("full-name").value=e.user_metadata.full_name||"",document.getElementById("email").value=e.email}initializeEventListeners(){const e=document.getElementById("profile-form");e.addEventListener("submit",async s=>{s.preventDefault(),await this.updateProfile(e)});const r=document.getElementById("password-form");r.addEventListener("submit",async s=>{s.preventDefault(),await this.updatePassword(r)});const t=document.getElementById("notification-form");t.addEventListener("submit",async s=>{s.preventDefault(),await this.updateNotifications(t)}),document.getElementById("logout-btn").addEventListener("click",async()=>{const{error:s}=await i.signOut();s||(window.location.href="/Login/login.html")})}async updateProfile(e){const r=e.querySelector("#full-name").value;try{const t=await n.updateProfile({full_name:r});if(t.error)throw new Error(t.error);this.showMessage(e,"Profile updated successfully!","success")}catch(t){this.showMessage(e,t.message,"error")}}async updatePassword(e){const r=e.querySelector("#current-password").value,t=e.querySelector("#new-password").value,s=e.querySelector("#confirm-password").value;if(t!==s){this.showMessage(e,"New passwords do not match","error");return}try{const a=await n.updatePassword(r,t);if(a.error)throw new Error(a.error);e.reset(),this.showMessage(e,"Password updated successfully!","success")}catch(a){this.showMessage(e,a.message,"error")}}async updateNotifications(e){const r={email_notifications:e.querySelector("#email-notifications").checked,translation_updates:e.querySelector("#translation-updates").checked,qr_code_alerts:e.querySelector("#qr-code-alerts").checked};try{const t=await n.updateNotificationSettings(r);if(t.error)throw new Error(t.error);this.showMessage(e,"Notification preferences updated!","success")}catch(t){this.showMessage(e,t.message,"error")}}showMessage(e,r,t){let s=e.querySelector(".message");s||(s=document.createElement("div"),s.className="message",e.insertBefore(s,e.firstChild)),s.textContent=r,s.className=`message ${t}`,setTimeout(()=>{s.remove()},5e3)}}document.addEventListener("DOMContentLoaded",()=>{new u});
